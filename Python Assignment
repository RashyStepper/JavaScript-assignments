 Python Assignment
# Author: Rashy
# Description: Solutions to 10 Python questions

import asyncio
import aiohttp  # Make sure to install: pip install aiohttp


# Question 1: String Manipulation
def capitalize_words(sentence: str) -> str:
    """Capitalize the first letter of each word in a sentence."""
    return " ".join(word.capitalize() for word in sentence.split())


# Question 2: List Methods
def process_list(numbers: list) -> int:
    """Double each number, keep only even numbers, and return their sum."""
    doubled = [n * 2 for n in numbers]
    evens = [n for n in doubled if n % 2 == 0]
    return sum(evens)


# Question 3: Dictionary Unpacking Equivalent
def extract_user_info(user: dict):
    """Extract and print username, email, and theme from a nested dictionary."""
    username = user.get("profile", {}).get("username")
    email = user.get("profile", {}).get("email")
    theme = user.get("settings", {}).get("theme")
    print(f"Username: {username}, Email: {email}, Theme: {theme}")


# Question 4: List of Dictionaries
def get_affordable_products(products: list, budget: int) -> list:
    """Return all products within the given budget."""
    return [p for p in products if p["price"] <= budget]


# Question 5: *args and Set Union
def merge_lists(*lists) -> list:
    """Merge multiple lists into one unique list (no duplicates)."""
    merged = set()
    for lst in lists:
        merged.update(lst)
    return list(merged)


# Question 6: Sorting & Finding
def second_largest(lst: list) -> int:
    """Find the second largest number without using sorted()."""
    first = second = float("-inf")
    for num in lst:
        if num > first:
            second, first = first, num
        elif first > num > second:
            second = num
    return second if second != float("-inf") else None


# Question 7: Higher Order Functions
def apply_operation(lst: list, operation: str) -> list:
    """Apply an operation (square, double, negate) to every element of the list."""
    ops = {
        "square": lambda x: x**2,
        "double": lambda x: x * 2,
        "negate": lambda x: -x,
    }
    return [ops[operation](n) for n in lst] if operation in ops else lst


# Question 8: Advanced Dictionary Manipulation
def group_by_category(items: list) -> dict:
    """Group a list of items by their category."""
    grouped = {}
    for item in items:
        cat = item.get("category")
        grouped.setdefault(cat, []).append(item["name"])
    return grouped


# Question 9: Default & Safe Access
def get_user_city(user: dict) -> str:
    """Return user city if available, else 'Unknown'."""
    return user.get("address", {}).get("city", "Unknown")


# Question 10 (Bonus: Async + HTTP Request)
async def fetch_posts():
    """Fetch posts and print the first 5 titles."""
    url = "https://jsonplaceholder.typicode.com/posts"
    async with aiohttp.ClientSession() as session:
        async with session.get(url) as resp:
            posts = await resp.json()
            for post in posts[:5]:
                print(post["title"])


# ------------- Example Runs (Uncomment to test) ----------------
if __name__ == "__main__":
    print(capitalize_words("hello world from python"))
    print(process_list([1, 2, 3, 4, 5]))
    user = {
        "id": 1,
        "profile": {"username": "mandem", "email": "mandem@example.com"},
        "settings": {"theme": "dark", "notifications": True},
    }
    extract_user_info(user)
    products = [
        {"name": "Laptop", "price": 1200},
        {"name": "Phone", "price": 800},
        {"name": "Tablet", "price": 600},
    ]
    print(get_affordable_products(products, 800))
    print(merge_lists([1, 2], [2, 3], [3, 4]))
    print(second_largest([10, 20, 4, 8, 15]))
    print(apply_operation([1, 2, 3], "square"))
    items = [
        {"name": "apple", "category": "fruit"},
        {"name": "carrot", "category": "vegetable"},
        {"name": "banana", "category": "fruit"},
    ]
    print(group_by_category(items))
    user1 = {"name": "John", "address": {"city": "Lagos"}}
    user2 = {"name": "Mary"}
    print(get_user_city(user1))
    print(get_user_city(user2))
    # asyncio.run(fetch_posts())
